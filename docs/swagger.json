{
    "swagger": "2.0",
    "info": {
        "description": "An event management service API in Go using Gin framework.",
        "title": "EventHandler API",
        "contact": {
            "name": "Marek Beck",
            "email": "marek.beck2@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "host": "localhost:3000",
    "paths": {
        "/event": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "event"
                ],
                "summary": "Creates event to database",
                "parameters": [
                    {
                        "description": "Event Data",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.EventData"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/structs.EventData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/weberrors.AppError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/weberrors.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/weberrors.AppError"
                        }
                    }
                }
            }
        },
        "/event/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "event"
                ],
                "summary": "Retrieves event from database",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (uuid)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/weberrors.AppError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/weberrors.AppError"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "event"
                ],
                "summary": "Delete event from database",
                "parameters": [
                    {
                        "type": "string",
                        "description": "\u003ctoken_string_goes_here\u003e",
                        "name": "API-AUTHENTICATION",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event ID (uuid)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/weberrors.AppError"
                        }
                    }
                }
            }
        },
        "/healthcheck": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health check"
                ],
                "summary": "Check health of this service",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.JsonHealthCheckStatus"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "structs.EventData": {
            "description": "If not provided, `videoQuality` \u0026 `audioQuality` default to `[\"720p\"]` \u0026 `[\"Low\"]`, respectively. If provided, first item in the list is default.",
            "type": "object",
            "required": [
                "date",
                "invitees",
                "languages",
                "name"
            ],
            "properties": {
                "audioQuality": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "date": {
                    "description": "YYYY-MM-DDTHH:MM:SSZ",
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "maxLength": 512
                },
                "id": {
                    "type": "string"
                },
                "invitees": {
                    "description": "[\"example@mail.com\"]",
                    "type": "array",
                    "maxItems": 100,
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "languages": {
                    "type": "array",
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "allowed chars: A-Za-z0-9 _-",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "videoQuality": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "structs.JsonHealthCheckStatus": {
            "type": "object",
            "properties": {
                "deployDate": {
                    "type": "string"
                },
                "result": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "weberrors.AppError": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                }
            }
        }
    }
}